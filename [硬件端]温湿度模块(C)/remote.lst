C51 COMPILER V9.60.0.0   REMOTE                                        10/10/2020 19:05:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE REMOTE
OBJECT MODULE PLACED IN remote.obj
COMPILER INVOKED BY: D:\APP\Keil\C51\BIN\C51.EXE SRC\remote.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\SRC)
                    - DEBUG OBJECTEXTEND PRINT(.\remote.lst) PAGEWIDTH(100) OBJECT(remote.obj)

line level    source

   1          /***
   2                  空调控制函数
   3          ***/
   4          #include "reg51.h"
   5          #include "intrins.h"
   6          #include "remote.h"
   7          #include "aircode.h"
   8          
   9          typedef unsigned char BYTE;
  10          typedef unsigned int WORD;
  11          
  12          #define FOSC 11059200L          //系统频率
  13          #define BAUD 9600             //串口波特率
  14          
  15          sfr AUXR  = 0x8e;               //辅助寄存器
  16          
  17          sfr P_SW1   = 0xA2;             //外设功能切换寄存器1
  18          
  19          #define S1_S0 0x40              //P_SW1.6
  20          #define S1_S1 0x80              //P_SW1.7
  21          
  22          bit busy;
  23          
  24          
  25          /*串口初始化*/
  26          void uInit()
  27          {
  28   1              //ACC 是一个累加器，主要用来存放数据
  29   1              ACC = P_SW1;
  30   1          ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
  31   1              //P_SW1是一个特殊功能的寄存器，用来将串口1进行切换
  32   1          P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
  33   1              // 串行控制器SCON为01010000
  34   1              //SM0为0 SM1为1 说明工作方式为方式1 8位UART，波特率可变
  35   1              //SM2为0 说明不是多机通信
  36   1              //REN为1 允许串行接收
  37   1              //TB8为0 在方式2或3中表示发送的第9位数据，我们用的是方式1不管
  38   1              //RB8为0 在方式2或3中表示接收的第9位数据，我们也不管
  39   1              //TI为0 主要用于发送中断请求的标志位
  40   1              //RI为0 用于接收中断的标志位
  41   1          SCON = 0x50;                //8位可变波特率
  42   1              //AUXR是辅助寄存器用来控制定时器的分频
  43   1              //01000000 T1x12为1表示定时器1的速度是传统8051的12倍
  44   1          AUXR = 0x40;                //定时器1为1T模式
  45   1              //TMOD是定时器/计数器的工作模式寄存器，用来控制定时器的操作模式，我们设置的是模式0
  46   1          TMOD = 0x00;                //定时器1为模式0(16位自动重载)
  47   1              //TL1是定时器的低8位，TH1是定时器的高8位，这个定时器主要是用来控制波特率的
  48   1          TL1 = (65536 - (FOSC/4/BAUD));   //设置波特率重装值
  49   1          TH1 = (65536 - (FOSC/4/BAUD))>>8;
  50   1              //TR1为1表示定时器1的控制为，如果为1就表示开始启动定时器
  51   1          TR1 = 1;                    //定时器1开始启动
  52   1              //ES主要是串口中断控制为，如果为1表示允许串口中断
  53   1          ES = 1;                     //使能串口中断
  54   1              //EA表示CPU总的中断允许位，如果为1，那么就表示开放CPU中断
C51 COMPILER V9.60.0.0   REMOTE                                        10/10/2020 19:05:03 PAGE 2   

  55   1          EA = 1;
  56   1       }
  57          
  58          
  59          /*----------------------------
  60          UART 中断服务程序
  61          -----------------------------*/
  62          void Uart() interrupt 4 using 1
  63          {
  64   1          if (RI)
  65   1          {
  66   2              RI = 0;                 //清除RI位
  67   2              //P0 = SBUF;              //P0显示串口数据
  68   2          }
  69   1          if (TI)
  70   1          {
  71   2              TI = 0;                 //清除TI位
  72   2              busy = 0;               //清忙标志
  73   2          }
  74   1      }
  75          
  76          /*----------------------------
  77          发送串口数据
  78          ----------------------------*/
  79          void SendData(BYTE dat)
  80          {
  81   1          while (busy);               //等待前面的数据发送完成
  82   1          //ACC = dat;                  //获取校验位P (PSW.0)
  83   1          busy = 1;
  84   1          SBUF = dat;                 //写数据到UART数据寄存器
  85   1      }
  86          
  87          /*----------------------------
  88          发送字符串
  89          ----------------------------*/
  90          void SendString(char *s)
  91          {
  92   1          while (*s)                  //检测字符串结束标志
  93   1          {
  94   2              SendData(*s++);         //发送当前字符
  95   2          }
  96   1      }
  97          
  98          
  99          // 空调控制函数，用于向空调发送温度信息
 100          void AirControl(unsigned char tmp)
 101          {
 102   1              unsigned char position;
 103   1              int i;
 104   1              if(tmp>=16 && tmp<=30) position=tmp-15;
 105   1              else position = 0;
 106   1              for(i=0;i<236;i++){
 107   2                      SendData(AirData[position][i]);
 108   2              }
 109   1      }
 110          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    161    ----
   CONSTANT SIZE    =   3776    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   REMOTE                                        10/10/2020 19:05:03 PAGE 3   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
